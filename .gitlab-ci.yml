#.yml file for Gitlab-CI support

# Note that the following tokens must be supplied via the Gitlab Repository Settings:
# - CI_USER: username to pull from gitlab repository
# - CI_TOKEN: password to pull from gitlab repository
# - REPO_HOST: gitlab host
# - DOCKER_REGISTRY: registry to pull internal images
# - CLEAN_GNSSTK_WRKSP:  purge build pipeline directories in local workspace
# - BLD_VS2019: activate windows jobs with VS2019

include:
  - project: sgl-tks/ci-control
    file: /gnsstk/ci_downstrm_chain.yml
    ref: main
  - project: sgl-tks/ci-control
    file: /general/artifactory-upload.yml
    ref: main
  - project: 'sgl/ci-control'
    file: 'common/scanning/sonar.yml'

stages:
- check
- build
- test
- install
- package
- push
- downstream_ci
- deploy
- downstream_stack
- clean

variables:
  # Default cmake arguments
  CMAKE_ARG_DEFAULT: "-DBUILD_EXT=ON -DBUILD_PYTHON=ON -DTEST_SWITCH=ON -DPIP_WHEEL_SWITCH=ON ../"
  # this can be used for incremental builds
  # GIT_CLEAN_FLAGS: none
  # This can be set to True by Gitlab UI to only build/test packages.
  RELEASE_ONLY: "False"
  GNSSTK_APPS_COMMIT:
    value: "main"
    description: "Downstream branch of dependent gnsstk_apps repo. Defaults to main."
  NO_BIGBUILD_CI:
    value: "False"
    description: "If True then no big build jobs are executed on main/ci_xxx/version_xxx_prep branches. Defaults to False"
  BLD_VS2019:
    value: "True"
    description: "If True, then build under Windows using Visual Studio 2019"
  BLD_ONLY_VS2019:
    value: "False"
    description: "If True, then ONLY build Windows using Visual Studio 2019 and skips Visual Studio 2015 jobs. Defaults to False"
  BLD_VS_DLL:
    value: "True"
    description: "If True, then build Windows Dynamic Link Libraries (VS2019 only)"
  BLD_VS_STATIC:
    value: "True"
    description: "If True, then build Windows Static Libraries (VS2019 only, VS2015 always builds static)"
  SONAR_EXCLUSIONS: '**/tests/**,**/conda_recipe/**,**/data/**,**/coverage-reports/**,**/build*/**,**/debian/**,**/deprecated/**,**/examples/**,**/ref/**,**/rpm_files/**,**/swig/**'
  SONAR_SOURCES: 'core'
  SONAR_TEST_SOURCES: 'core/tests'
  SONAR_TEST_INCLUSION: 'core/tests'
  SONAR_PROJECT_KEY: gnsstk

# Template for all normal jobs.
.normal_build:
  except:
    variables:
      - $BLD_ONLY_VS2019 == "True"

.vs2019_build:
  only:
    variables:
      - $BLD_VS2019 == "True"
      - $BLD_VS_STATIC == "True"

.vs2019_dll_build:
  only:
    variables:
      - $BLD_VS2019 == "True"
      - $BLD_VS_DLL == "True"

# Template for all "big" builds.
.big_build:
  only:
    refs:
      - main
      - /^ci_.*$/
      - /^version_.*_prep$/
      - stable
      - /^release\/v[0-9.]*$/
    variables:
      - $RELEASE_ONLY != "True" && $NO_BIGBUILD_CI != "True"

# Template for disabling stages
.dont_build:
  only:
    refs:
      - /^do_not_build.*$/

# Check Stage
# Runs static analysis on code.
static_analysis:
  stage: check
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - ./lint_test.sh
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: true

# sgl_lint will verify that source files have proper copyright.
sgllint_lint:
  stage: check
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_conda_py27:latest
  script:
    - '######'
    - '# This job checks all files for required lines like copyright/license statements.'
    - '######'
    - conda activate py27
    # Obtain the latest version of ./sgl_lint.py
    - git clone --depth 1 https://${CI_USER}:${CI_TOKEN}@${REPO_HOST}/sgl/repo_utils.git
    - python repo_utils/sgl_lint.py -v -R core
    - python repo_utils/sgl_lint.py -v -R ext
    - python repo_utils/sgl_lint.py -v -R swig/apps
    - python repo_utils/sgl_lint.py -v -R swig/gnsstk
  dependencies: []

protected_term_lint:
  stage: check
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36:latest
  script:
    - '######'
    - '# This job checks all files for protected terms in files modified since the branch split from default.'
    - '######'
    - conda activate py36
    - git clone --depth 1 https://${CI_USER}:${CI_TOKEN}@${REPO_HOST}/sgl/repo_utils.git
    # We pull the default branch because the CI doesn't normally have any branches other than the one being tested.
    - git fetch -uf origin ${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}
    - bash repo_utils/dw_search/modified_file_check.sh ${CI_DEFAULT_BRANCH} $CI_COMMIT_SHA
  dependencies: []
  # This has the occasional false-positive, so it's advisory only.
  allow_failure: true

protected_history_lint:
  stage: check
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36:latest
  script:
    - '######'
    - '# This job checks all files modified on this branch for sensitive terms.'
    - '######'
    - conda activate py36
    - git clone --depth 1 https://${CI_USER}:${CI_TOKEN}@${REPO_HOST}/sgl/repo_utils.git
    # We pull the default branch because the CI doesn't normally have any branches other than the one being tested.
    - git fetch -uf origin ${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}
    - bash repo_utils/dw_search/history_check.sh ${CI_DEFAULT_BRANCH} $CI_COMMIT_SHA
  dependencies: []
  # Temporarily allowing to fail so pipeline doesn't fail
  allow_failure: true

# Runs the documentation generation
generate_documentation:
  stage: check
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    # Install GraphViz
    - sudo apt-get install -y graphviz
    # Call doxygen w/alternate target directory
    - doxygen
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: true
  artifacts:
    paths:
      - docs/
    expire_in: 4 days

build_debian_9:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
    - build/
    expire_in: 4 days

build_debian_10:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/
    expire_in: 4 days

build_debian_10_virtualenv:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - python3 -m virtualenv --system-site-packages -p /usr/bin/python3 myenv
    - source myenv/bin/activate
    - mkdir -p build
    - cd build
    - cmake -DDEBUG_SWITCH=ON -DPYTHON_INSTALL_PREFIX=$VIRTUAL_ENV -DCMAKE_INSTALL_PREFIX=$VIRTUAL_ENV $CMAKE_ARG_DEFAULT -DPYTHON_EXECUTABLE=$VIRTUAL_ENV/bin/python3
    - make all -j 4
  artifacts:
    paths:
      - myenv/
      - build/
    expire_in: 4 days

build_conda_py27:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py27
  script:
    - conda activate py27
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/
    expire_in: 4 days

build_conda_py36:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - conda activate py36
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/
    expire_in: 4 days

sonar_conda_py36:
  stage: build
  needs: []
  extends: 
   - .normal_build
   - .sonarqube-check
  tags:
    - docker
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - conda activate py36
    - conda install -y cmake=3.22.1 nodejs
    - mkdir -p build coverage-reports
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - build-wrapper-linux-x86-64 --out-dir . make all -j 4
    - ctest -j 4 --output-junit $CI_PROJECT_DIR/coverage-reports/coverage-cpp.xml
    - cd ..
    - !reference [.scan-c++, script]
  artifacts:
    paths:
      - build/

build_redhat:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  artifacts:
    paths:
    - build/
    expire_in: 4 days

build_redhat_8:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/
    expire_in: 4 days

build_windows_vs2019_dll:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}_vs2019_dll
  stage: build
  needs: []
  extends: .vs2019_dll_build
  tags:
    - win10-vs2019
  script:
    - mkdir build
    - cd build
    - cmake -DBUILD_SHARED_LIBS=TRUE -DDEBUGTRACE=off -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DBUILD_PYTHON=ON -DTEST_SWITCH=ON -G "Visual Studio 16 2019" -A x64 ../
    - cmake --build . --config Release -- /m
  artifacts:
    paths:
      - build/
    expire_in: 4 days
  allow_failure: false
  timeout: 180m

build_windows:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/$CI_PIPELINE_ID
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - win10-vs2019
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install -DDEBUGTRACE=off -DCMAKE_BUILD_TYPE=release -DBUILD_EXT=ON -DBUILD_PYTHON=OFF -DTEST_SWITCH=ON -G "Visual Studio 14 2015 Win64" ../
    - cmake --build . --config Release -- /m
  artifacts:
    paths:
    - build/
    expire_in: 4 days

build_windows_vs2019:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}_vs2019
  stage: build
  needs: []
  extends: .vs2019_build
  tags:
    - win10-vs2019
  script:
    - mkdir build
    - cd build
    - cmake -DBUILD_SHARED_LIBS=FALSE -DDEBUGTRACE=off -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DBUILD_PYTHON=OFF -DTEST_SWITCH=ON -G "Visual Studio 16 2019" -A x64 ../
    - cmake --build . --config Release -- /m
  artifacts:
    paths:
      - build/
    expire_in: 4 days
  allow_failure: false

# Test Stage
# Runs all tests of GNSSTK for each platform
test_debian_9:
  stage: test
  needs: [build_debian_9]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
    expire_in: 4 days
  dependencies:
    - build_debian_9

test_debian_10:
  stage: test
  needs: [build_debian_10]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
  dependencies:
    - build_debian_10

test_debian_10_virtualenv:
  stage: test
  needs: [build_debian_10_virtualenv]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - source myenv/bin/activate
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
    expire_in: 4 days
  dependencies:
    - build_debian_10_virtualenv

test_conda_py27:
  stage: test
  needs: [build_conda_py27]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py27
  script:
    - conda activate py27
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
    expire_in: 4 days
  dependencies:
    - build_conda_py27

test_conda_py36:
  stage: test
  needs: [build_conda_py36]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - conda activate py36
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
    expire_in: 4 days
  dependencies:
    - build_conda_py36

test_redhat:
  stage: test
  needs: [build_redhat]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    expire_in: 4 days
  dependencies:
    - build_redhat

test_redhat_8:
  stage: test
  needs: [build_redhat_8]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
      - build/Testing/Temporary/
    expire_in: 4 days
  dependencies:
    - build_redhat_8

test_windows:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/$CI_PIPELINE_ID
    GIT_STRATEGY: none
  stage: test
  needs: [build_windows]
  extends: .normal_build
  tags:
    - win10-vs2019
  script:
    - cd build
    - cmake --build . --target RUN_TESTS --config Release
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
    expire_in: 4 days
  dependencies:
    - build_windows
  timeout: 10m
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: false

test_windows_vs2019:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}_vs2019
    GIT_STRATEGY: none
  stage: test
  needs: [build_windows_vs2019]
  extends: .vs2019_build
  tags:
    - win10-vs2019
  script:
    - cd build
    - cmake --build . --target RUN_TESTS --config Release
  artifacts:
    when: on_failure
    paths:
      - build/Testing/Temporary/
      - build/swig/
    expire_in: 4 days
  dependencies:
    - build_windows_vs2019
  timeout: 10m
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: false

test_windows_vs2019_dll:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}_vs2019_dll
    GIT_STRATEGY: none
  stage: test
  needs: [build_windows_vs2019_dll]
  extends: .vs2019_dll_build
  tags:
    - win10-vs2019
  script:
    - cd build
    - cmake --build . --target RUN_TESTS --config Release
  artifacts:
    when: on_failure
    paths:
      - build/Testing/Temporary/
      - build/swig/
    expire_in: 4 days
  dependencies:
    - build_windows_vs2019_dll
  timeout: 10m
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: false

# User_Install Stage

# Tests user install of Gnsstk on each platform, saves artifacts for downstream builds.
user_install_debian_9:
  stage: install
  needs: [build_debian_9]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=$gnsstk -DPYTHON_USER_INSTALL=ON ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
    expire_in: 4 days
  dependencies:
    - build_debian_9

user_install_debian_10:
  stage: install
  needs: [build_debian_10]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=$gnsstk -DPYTHON_USER_INSTALL=ON ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
    expire_in: 4 days
  dependencies:
    - build_debian_10

virtualenv_install_debian_10:
  stage: install
  needs: [build_debian_10_virtualenv]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - source myenv/bin/activate
    - cd build
    - make install -j 4
  artifacts:
    paths:
      - myenv
    expire_in: 4 days
  dependencies:
    - build_debian_10_virtualenv

user_install_redhat:
  stage: install
  needs: [build_redhat]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
    expire_in: 4 days
  dependencies:
    - build_redhat

user_install_redhat_8:
  stage: install
  needs: [build_redhat_8]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
    expire_in: 4 days
  dependencies:
    - build_redhat_8

user_install_windows:
  stage: install
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/$CI_PIPELINE_ID
    GIT_STRATEGY: none
  needs: [build_windows,test_windows]
  extends: .normal_build
  tags:
    - win10-vs2019
  script:
    - cd build
    - cmake --build . --config Release --target install
    - cd ..
    - dir build\install
  artifacts:
    paths:
      - build/install/
    expire_in: 4 days
  dependencies:
    - build_windows
    - test_windows
  timeout: 20m
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: false
  retry: 2

user_install_windows_vs2019:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}_vs2019
    GIT_STRATEGY: none
  stage: install
  needs: [build_windows_vs2019,test_windows_vs2019]
  extends: .vs2019_build
  tags:
    - win10-vs2019
  script:
    - cd build
    - cmake --build . --config Release --target install
    - cd ..
    - dir build\install
  artifacts:
    paths:
      - build/install/
    expire_in: 4 days
  dependencies:
    - build_windows_vs2019
    - test_windows_vs2019
  allow_failure: false
  timeout: 20m

user_install_windows_vs2019_dll:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}_vs2019_dll
    GIT_STRATEGY: none
  stage: install
  needs: [build_windows_vs2019_dll,test_windows_vs2019_dll]
  extends: .vs2019_dll_build
  tags:
    - win10-vs2019
  script:
    - cd build
    - cmake --build . --config Release --target install
    - cd ..
    - dir build\install
  artifacts:
    paths:
      - build/install/
    expire_in: 4 days
  dependencies:
    - build_windows_vs2019_dll
    - test_windows_vs2019_dll
  allow_failure: false
  timeout: 20m

# System Stage
# Tests install of Gnsstk on each platform, saves artifacts for downstream builds.
system_install_debian_9:
  stage: install
  needs: [build_debian_9]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd build
    - export gnsstk=/usr/local
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - sudo make install -j 4
  dependencies:
    - build_debian_9

system_install_redhat:
  stage: install
  needs: [build_redhat]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd build
    - export gnsstk=/usr/local
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - sudo make install -j 4
  dependencies:
    - build_redhat

system_install_redhat_8:
  stage: install
  needs: [build_redhat_8]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - cd build
    - export gnsstk=/usr/local
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - sudo make install -j 4
  dependencies:
    - build_redhat_8

# Package Stage
# Tests packaging of Gnsstk on all platforms

# Note: debian 7 can't build the swig bindings out of the box because
# SWIG 2.0.7 doesn't understand enum classes.
# This makes packaging difficult at best since the package config
# assumes swig bindings were built.
# package_debian_7:
#   stage: package
#   needs: []
#   extends: .package_build
#   tags:
#     - docker-executor
#     # Not all docker runners support debian 7
#     - deb7-support
#   image: $DOCKER_REGISTRY/debian7_fai_ish
#   script:
#     - rm -rf ../*.deb
#     # Mark the debian log so that this package is a backport.
#     # dpkg-parsechangelog doesn't support -S under debian 7, so hard code it.
#     - export DEBEMAIL="No One <nobody@arlut.utexas.edu>"
#     - dch --bpo "No Changes"
#     # make dpkg-source stop complaining about manual tweaking
#     - echo 'extend-diff-ignore="debian/source/options"' >>debian/source/options
#     - echo 'extend-diff-ignore="debian/control"' >>debian/source/options
#     # manually tweak control file for deb7 compatibility
#     - sed -i -e 's/ *<pkg_python>//g' -e '/Build-Profiles:/d' debian/control
#     - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=wheezy-sgl"
#     - mkdir debs
#     - mv ../*.deb debs
#     - mv ../*.changes debs
#     - mv ../*.dsc debs
#     - mv ../*.git debs
#   artifacts:
#     paths:
#     - debs/
#   dependencies:
#     - build_debian_7

# According to the toolkit matrix, we don't need to support debian8.
# package_debian_8:
#   stage: package
#   needs: []
#   tags:
#     - docker-executor
#   image: $DOCKER_REGISTRY/debian8_fai_ish
#   script:
#     - rm -rf ../*.deb
#     # Mark the debian log so that this package is a backport.
#     # Use the most recent Maintainer as current maintainer.
#     - export DEBEMAIL=$(dpkg-parsechangelog -S Maintainer)
#     - dch --bpo "No Changes"
#     - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=jessie-sgl"
#     - mkdir debs
#     - mv ../*.deb debs
#     - mv ../*.changes debs
#     - mv ../*.dsc debs
#     - mv ../*.git debs
#   artifacts:
#     paths:
#     - debs/
#   dependencies:
#     - build_debian_8

package_debian_9:
  stage: package
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - rm -rf ../*.deb
    - dpkg-buildpackage --build-profiles=pkg_python,debug_package -us -uc -d --changes-option="-DDistribution=stretch-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.buildinfo debs
  artifacts:
    paths:
      - debs/
  dependencies:
    - build_debian_9

package_debian_10:
  stage: package
  needs: []
  variables:
    BUILD_TYPE: fast
  rules:
    # Add this rule to prevent an "additional" single element pipeline for merge requests.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /main/ || $CI_COMMIT_REF_NAME =~/^ci_.*$/ || $CI_COMMIT_REF_NAME=~/^version_.*_prep$/
      variables:
        BUILD_TYPE: debug
    - when: on_success
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - rm -rf ../*.deb
    # Mark the debian log so that this package is a backport.
    # Use the most recent Maintainer as current maintainer.
    - export DEBEMAIL=$(dpkg-parsechangelog -S Maintainer)
    - dch --bpo "No Changes"
    - if [ "$BUILD_TYPE" == "debug" ]; then BUILD_PROFILES="pkg_python,debug_package"; else BUILD_PROFILES="pkg_python"; fi
    - dpkg-buildpackage --build-profiles=${BUILD_PROFILES} -us -uc -d --changes-option="-DDistribution=buster-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.buildinfo debs
  artifacts:
    paths:
      - debs/
  timeout:  90m
  dependencies:
    - build_debian_10

package_conda:
  stage: package
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - conda activate conda_builder
    - export GIT_COMMIT=$CI_COMMIT_REF_NAME
    - export GIT_LAST_TAG=$(git describe --abbrev=0 origin/stable)
    - export GIT_CHANGES_LAST_TAG=$(git rev-list --count $(git describe --abbrev=0 origin/stable)..@)
    # Build Conda Py27 package
    - conda-build conda_recipe
    # Copy files to local directory for archiving.
    - mkdir -p conda-bld
    - cp -r $CONDA_PREFIX/conda-bld/* conda-bld/
    # Don't archive the cache files.
    - rm -r conda-bld/linux-64/.cache
    # Display the contents of the py36 tarball
    - tar -tf conda-bld/linux-64/gnsstk-*py36*.tar.bz2
  artifacts:
    paths:
      - conda-bld/linux-64/
  dependencies: []

package_redhat:
  stage: package
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix gnsstk-master/ -o rpm_files/SOURCES/gnsstk-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" -ba SPECS/gnsstk.spec
  artifacts:
    paths:
      - rpm_files/RPMS/x86_64/gnsstk-*
      - rpm_files/SRPMS/gnsstk-*
  dependencies: []

package_redhat_8:
  stage: package
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix gnsstk-master/ -o rpm_files/SOURCES/gnsstk-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" --define "_build_id_links none" -ba SPECS/gnsstk.spec
  artifacts:
    paths:
      - rpm_files/RPMS/x86_64/gnsstk-*
      - rpm_files/SRPMS/gnsstk-*
  dependencies: []

package_redhat_8_py36:
  stage: package
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix python3-gnsstk-master/ -o rpm_files/SOURCES/python3-gnsstk-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" --define "_build_id_links none" -ba SPECS/gnsstk_py36.spec
  artifacts:
    paths:
      - rpm_files/RPMS/x86_64/python3-gnsstk-*
      - rpm_files/SRPMS/python3-gnsstk-*
  dependencies: []

package_windows:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}
    GIT_STRATEGY: none
  stage: package
  extends: .normal_build
  needs: [build_windows]
  tags:
    - win10-vs2019
  script:
    - cd build
    - cpack -C Release
#    - cpack -G WIX -C Release
  dependencies:
    - build_windows
  artifacts:
    paths:
      - build/_CPack_Packages

package_windows_vs2019:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}_vs2019
    GIT_STRATEGY: none
  stage: package
  needs: [build_windows_vs2019]
  extends: .vs2019_build
  tags:
    - win10-vs2019
  script:
    - cd build
    - cpack -C Release
#    - cpack -G WIX -C Release
  dependencies:
    - build_windows_vs2019
  artifacts:
    paths:
      - build/_CPack_Packages

package_windows_vs2019_dll:
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_NAME/${CI_PIPELINE_ID}_vs2019_dll
    GIT_STRATEGY: none
  stage: package
  needs: [build_windows_vs2019_dll]
  extends: .vs2019_dll_build
  tags:
    - win10-vs2019
  script:
    - cd build
    - cpack -C Release
#    - cpack -G WIX -C Release
  dependencies:
    - build_windows_vs2019_dll
  artifacts:
    paths:
      - build/_CPack_Packages

# Deploy Stage
# Tests install of Gnsstk package on each platform, saves artifacts for downstream builds.

deploy_debian_9:
  stage: deploy
  needs: [package_debian_9]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - cd debs
    - sudo apt-get -y install ./*.deb
    - python3 -c "import gnsstk"
    - df_diff -h
  dependencies:
    - package_debian_9

deploy_debian_10:
  stage: deploy
  needs: [package_debian_10]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - cd debs
    - sudo apt-get -y install ./*.deb
    - python3 -c "import gnsstk"
    - df_diff -h
    - gnsstk-config --includedir
  dependencies:
    - package_debian_10

deploy_redhat:
  stage: deploy
  needs: [package_redhat]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gnsstk-*.rpm -y
    - df_diff -h
    - gnsstk-config --includedir
  dependencies:
    - package_redhat

deploy_redhat_8:
  stage: deploy
  needs: [package_redhat_8]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gnsstk-*.rpm -y
    - df_diff -h
    - gnsstk-config --includedir
  dependencies:
    - package_redhat_8

deploy_redhat_py36:
  stage: deploy
  needs: [package_redhat_8, package_redhat_8_py36]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gnsstk-*.rpm -y
    - sudo yum install python3-gnsstk-*.rpm -y
    - python3 -c "import gnsstk"
    - df_diff -h
  dependencies:
    - package_redhat_8_py36
    - package_redhat_8

push_artifacts:
  extends: .push_selected_artifacts
  variables:
    # CONDA_PACKAGES: "conda-bld/linux-64/*.tar.bz2"
    DEB_9_PACKAGES: "debs/*-1_amd64.deb"
    DEB_10_PACKAGES: "debs/*bpo10*.deb"
    #RPM_PACKAGES: "rpm_files/RPMS/x86_64/*.rpm"
  stage: push
  needs: [package_conda, package_debian_9, package_debian_10, package_redhat_8, package_redhat_8_py36]
  dependencies: [package_conda, package_debian_9, package_debian_10, package_redhat_8, package_redhat_8_py36]
